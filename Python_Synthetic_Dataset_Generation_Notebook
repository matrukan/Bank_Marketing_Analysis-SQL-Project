import pandas as pd
import numpy as np
import random
from datetime import datetime, timedelta
from faker import Faker

# Initialize Faker for realistic data generation
fake = Faker()

# Set random seed for reproducibility
np.random.seed(42)
random.seed(42)

# Configuration
num_customers = 10000
start_date = datetime(2020, 1, 1)
end_date = datetime(2023, 12, 31)

# Function to generate random dates
def random_date(start, end):
    return start + timedelta(days=random.randint(0, (end - start).days))

# Generate customer data
customer_data = []
for i in range(1, num_customers + 1):
    age = random.randint(18, 90)
    job = random.choice(['admin.', 'blue-collar', 'entrepreneur', 'housemaid', 
                        'management', 'retired', 'self-employed', 'services', 
                        'student', 'technician', 'unemployed', 'unknown'])
    marital = random.choice(['single', 'married', 'divorced'])
    education = random.choice(['basic.4y', 'basic.6y', 'basic.9y', 'high.school',
                             'illiterate', 'professional.course', 'university.degree', 'unknown'])
    default = random.choice(['yes', 'no'])
    housing = random.choice(['yes', 'no'])
    loan = random.choice(['yes', 'no'])
    contact = random.choice(['cellular', 'telephone'])
    month = random.choice(['jan', 'feb', 'mar', 'apr', 'may', 'jun', 
                          'jul', 'aug', 'sep', 'oct', 'nov', 'dec'])
    day_of_week = random.choice(['mon', 'tue', 'wed', 'thu', 'fri'])
    
    customer_data.append({
        'customer_id': i,
        'age': age,
        'job': job,
        'marital': marital,
        'education': education,
        'default': default,
        'housing': housing,
        'loan': loan,
        'contact': contact,
        'month': month,
        'day_of_week': day_of_week
    })

# Generate campaign data
campaign_data = []
campaign_ids = list(range(1, 21))  # 20 different campaigns
campaign_types = ['email', 'telemarketing', 'direct_mail', 'social_media', 'in_branch']

for i in range(1, num_customers + 1):
    campaign_id = random.choice(campaign_ids)
    campaign_type = random.choice(campaign_types)
    campaign_date = random_date(start_date, end_date)
    duration = random.randint(30, 600)  # call duration in seconds
    contacts = random.randint(1, 10)  # number of contacts during campaign
    pdays = random.choice([999] + list(range(1, 30)))  # days since last contact (999 means not previously contacted)
    previous = random.randint(0, 5)  # number of contacts before this campaign
    poutcome = random.choice(['success', 'failure', 'nonexistent'])
    
    # Generate outcome with probability weighted by factors
    base_prob = 0.1
    # Adjust probability based on factors
    adjusted_prob = base_prob
    if customer_data[i-1]['age'] > 60:
        adjusted_prob *= 1.5
    if customer_data[i-1]['job'] in ['retired', 'management']:
        adjusted_prob *= 1.3
    if poutcome == 'success':
        adjusted_prob *= 2
    if campaign_type == 'in_branch':
        adjusted_prob *= 1.8
    
    outcome = 'yes' if random.random() < adjusted_prob else 'no'
    
    campaign_data.append({
        'campaign_id': campaign_id,
        'customer_id': i,
        'campaign_type': campaign_type,
        'campaign_date': campaign_date,
        'duration': duration,
        'contacts': contacts,
        'pdays': pdays,
        'previous': previous,
        'poutcome': poutcome,
        'outcome': outcome
    })

# Generate financial data
financial_data = []
for i in range(1, num_customers + 1):
    balance = round(random.gauss(0, 5000), 2)
    if balance < -5000:
        balance = -5000
    if balance > 50000:
        balance = 50000
    
    # Generate related financial indicators
    emp_var_rate = round(random.uniform(-3, 2), 1)
    cons_price_idx = round(random.uniform(92, 95), 3)
    cons_conf_idx = round(random.uniform(-50, -20), 1)
    euribor3m = round(random.uniform(0, 5), 1)
    nr_employed = round(random.uniform(4960, 5230), 1)
    
    financial_data.append({
        'customer_id': i,
        'balance': balance,
        'emp_var_rate': emp_var_rate,
        'cons_price_idx': cons_price_idx,
        'cons_conf_idx': cons_conf_idx,
        'euribor3m': euribor3m,
        'nr_employed': nr_employed
    })

# Create DataFrames
customers_df = pd.DataFrame(customer_data)
campaigns_df = pd.DataFrame(campaign_data)
financial_df = pd.DataFrame(financial_data)

# Save to CSV
customers_df.to_csv('bank_customers.csv', index=False)
campaigns_df.to_csv('bank_campaigns.csv', index=False)
financial_df.to_csv('bank_financials.csv', index=False)

print("Datasets generated successfully!")
